@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

    <div class="text-center">

        <form method="post">
            <div class="row">
                <div class="col">CV</div>
                <div class="col">Job description</div>
            </div>
            <div class="row">
                <div class="col">
                    <textarea rows="10" cols="50" class="row form-control mx-0" draggable="false" type="text" style="width:100%" asp-for="@Model.CV">@Model.CV</textarea>
                </div>
                <div class="col">
                    <textarea rows="10" cols="50" class="row form-control mx-0" draggable="false" type="text" style="width:100%" asp-for="@Model.JobDescription">@Model.JobDescription</textarea>
                </div>
            </div>
            <input type="submit" value="Analyse" class="btn btn-primary mt-3 w-25" style="height:50px" />
        </form>

        @if (Model.GraphResult != null)
        {
            <h3 style="margin-top:2em">
                Score: @Model.Score%
            </h3>

            <div style="border: 1px solid gray; width:1100px;height:600px; margin:0 auto;">
                <svg width="1100" height="600"></svg>
            </div>

            @if (Model.ChartResult != null)
            {
                <div style="width:455px; height:400px; margin:0 auto" class="mt-3">
                    <svg width="100%" height="100%"></svg>
                    <div style="position: absolute; left:53%; top: 0; border-left:0px black solid; height:100%;"></div>
                    <form style="display:none"></form>
                </div>
            }
        }
    </div>


<!--Plugin CSS file with desired skin-->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.3.1/css/ion.rangeSlider.min.css" />
<!--jQuery-->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<!--Plugin JavaScript file-->
<script src="https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.3.1/js/ion.rangeSlider.min.js"></script>


<script>
    var svgns = "http://www.w3.org/2000/svg";

    var svg = document.getElementsByTagName("svg")[1];
    var object = '@Html.Raw(Model.ChartResult)';

    var data = JSON.parse(object);


    var elementHeight = 40;
    var elementWidth = Math.floor(0.40 * window.innerWidth / 2);

    var minimalElWidth = 1000;

    var i = 0;
    data.jobScores.forEach(element => {
        var carcassBar = document.createElementNS(svgns, "rect");
        carcassBar.setAttributeNS(null, "width", elementWidth);
        carcassBar.setAttributeNS(null, "height", elementHeight);
        carcassBar.setAttributeNS(null, "stroke-width", "3px");
        carcassBar.setAttributeNS(null, "stroke-color", "black");
        carcassBar.setAttributeNS(null, "x", 10);
        carcassBar.setAttributeNS(null, "y", i * (elementHeight + 10));
        svg.appendChild(carcassBar);

        var coloredBar = document.createElementNS(svgns, "rect");
        coloredBar.setAttributeNS(null, "width", element.value * elementWidth);
        coloredBar.setAttributeNS(null, "height", elementHeight);
        coloredBar.setAttributeNS(null, "fill", "green");
        coloredBar.setAttributeNS(null, "x", 10);
        coloredBar.setAttributeNS(null, "y", i * (elementHeight + 10));
        svg.appendChild(coloredBar);

        if (element.value != 0)
            minimalElWidth = Math.min(minimalElWidth, element.value * elementWidth);

        ++i;
    });

    i = 0;
    data.jobScores.forEach(element => {
        var label = document.createElementNS(svgns, "text");
        label.setAttributeNS(null, "fill", "white");
        label.setAttributeNS(null, "x", minimalElWidth / 2);
        label.setAttributeNS(null, "y", i * (elementHeight + 10) + elementHeight / 2);
        label.setAttributeNS(null, "font-size", "20px");
        label.innerHTML = element.word;
        svg.appendChild(label);

        var percentage = document.createElementNS(svgns, "text");
        percentage.setAttributeNS(null, "fill", "red");
        percentage.setAttributeNS(null, "x", elementWidth + 35);
        percentage.setAttributeNS(null, "y", i * (elementHeight + 10) + elementHeight / 2 + 10);
        percentage.setAttributeNS(null, "font-size", "30px");
        percentage.innerHTML = Math.round(element.value * 100) + "%";
        svg.appendChild(percentage);

        ++i;
    });
</script>


<style>
    .showcase__mark {
        display: block;
        position: absolute;
        top: 45px;
        background: #f00;
        transform: rotate(-45deg);
        padding: 1px 3px;
        border-radius: 3px;
        color: #fff;
        margin-left: -10px;
    }
</style>

<style>
    #chart-container {
        height: 100px;
    }

    input[type=range] {
        position: absolute;
        top: 25;
        -webkit-appearance: slider-vertical;
        writing-mode: bt-lr;
        width: 15px;
        height: 200px;
        padding: 0 5px;
    }


    .range_label {
        position: absolute;
        top: 230;
        font: 13px black;
    }


    #totalPercentage {
        position: absolute;
        left: 72%;
        top: 68%;
        font: 100px red;
    }
</style>

<script src="https://d3js.org/d3.v4.min.js"></script>
<link href="https://fonts.googleapis.com/css?family=Inconsolata" rel="stylesheet">

<script>

var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");


var simulation = d3.forceSimulation()
    .force("link", d3.forceLink().id(function(d) { return d.id; }))
     .force('charge', d3.forceManyBody()
      .strength(-500)
      .theta(0.6)
      .distanceMax(150)
    )
    .force("center", d3.forceCenter(width / 2 , height / 2));

    var object = '@Html.Raw(Model.GraphResult)';

    var graph = JSON.parse(object);


function run(graph) {

  graph.links.forEach(function(d){
  });

      var link = svg.append("g")
                    .style("stroke", "#aaa")
                    .selectAll("line")
                    .data(graph.links)
                    .enter().append("line");

      var node = svg.append("g")
                .attr("class", "nodes", "size","color", "value")
      .selectAll("circle")
                .data(graph.nodes)
      .enter().append("circle")
              .attr("r", 2)
              .call(d3.drag()
                  .on("start", dragstarted)
                  .on("drag", dragged)
                  .on("end", dragended));

      var label = svg.append("g")
          .attr("class", "labels")
          .selectAll("text")
          .data(graph.nodes)
          .enter().append("text")
            .attr("class", "label")
            .text(function(d) { return d.id; });

      simulation
          .nodes(graph.nodes)
          .on("tick", ticked);

      simulation.force("link")
          .links(graph.links);

      function ticked() {
        link
            .attr("x1", function(d) { return d.source.x; })
            .attr("y1", function(d) { return d.source.y; })
            .attr("x2", function(d) { return d.target.x; })
            .attr("y2", function(d) { return d.target.y; });

        node
             .attr("r", function(d) { return d.size}) // radius 16
             .style("fill",function(d) { return d.color} ) //"#efefef"
             .style("stroke", "#424242")
             .style("stroke-width", "1px")
             .attr("cx", function (d) { return d.x+5; })
             .attr("cy", function(d) { return d.y-3; });

        label
    		    .attr("x", function(d) { return d.x; })
                .attr("y", function (d) { return d.y; })
                .style("font-size", "15px").style("fill", "#333");

      }
}

function dragstarted(d) {
      if (!d3.event.active) simulation.alphaTarget(0.1).restart()
      d.fx = d.x
      d.fy = d.y
    //  simulation.fix(d);
    }

    function dragged(d) {
      d.fx = d3.event.x
      d.fy = d3.event.y
    //  simulation.fix(d, d3.event.x, d3.event.y);
    }

    function dragended(d) {
      d.fx = d3.event.x
      d.fy = d3.event.y
      if (!d3.event.active) simulation.alphaTarget(0);
      //simulation.unfix(d);
    }
run(graph)

</script>